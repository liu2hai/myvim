" vgod's vimrc
" Tsung-Hsiang (Sean) Chang <vgod@vgod.tw>
" Fork me on GITHUB  https://github.com/vgod/vimrc
" read https://github.com/vgod/vimrc/blob/master/README.md for more info


" For pathogen.vim: auto load all plugins in .vim/bundle

" for ycm on windows R0634 ERROR
if has('win32')
python << EOF
import os, re
path = os.environ['PATH'].split(';')

def is_problem(folder):
    try:
        for item in os.listdir(folder):
            if re.match(r'msvcr\d\d\.dll', item):
                return True
    except:
        pass
    return False

path = [folder for folder in path if not is_problem(folder)]
os.environ['PATH'] = ';'.join(path)
EOF
endif " for ycm on windows R0634 ERROR

let g:pathogen_disabled = []
if !has('gui_running')
   call add(g:pathogen_disabled, 'powerline')
endif

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" General Settings

set nocompatible	" not compatible with the old-fashion vi mode
set bs=2		    " allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set ruler		    " show the cursor position all the time
set autoread		" auto read when file is changed from outside

set number

filetype off          " necessary to make ftdetect work on Linux
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins


" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc

" open cl buffer when a quickfix command be executed
autocmd QuickFixCmdPost * :cw 

" tab show setting
" only show filename, exclude dir
set guitablabel=%m%t

syntax enable
syntax on		" syntax highlight
set hlsearch		" search highlighting

if has("gui_running")	" GUI color and font settings
  set guifont=Courier\ New:h14
  "set guifontwide="Hiragino Sans GB"
  set background=dark 
  set t_Co=256          " 256 color mode
  set cursorline        " highlight current line
  set guioptions -=T    " not toolbar
  set guioptions -=m    " not menubar
  set guioptions -=b    " not bottom scroll bar
  set guioptions -=l    " not left hand scroll bar
  set guioptions -=r    " not right hand scroll bar
  set guioptions -=L    " not left hand scroll bar in vsplit windows
  set guioptions -=R    " not rihgt hand scroll bar in vsplit windows
  colors gmolokai
  "colors solarized
  highlight CursorLine          guibg=#003853 ctermbg=24  gui=none cterm=none
else
" terminal color settings
  colors vgod
endif

set showmatch		" Cursor shows matching ) and }
set showmode		" Show current mode
set wildchar=<TAB>	" start wild expansion in the command line using <TAB>
set wildmenu        " wild char completion menu

" ignore these files while expanding wild chars
set wildignore=*.o,*.class,*.pyc

set autoindent		" auto indentation
set smartindent     " smart indent
set incsearch		" incremental search
set nobackup		" no *~ backup files
set copyindent		" copy the previous indentation on autoindenting
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to context

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set expandtab        "replace <TAB> with spaces, use space only
set tabstop=4        "define <TAB> equal 4 spaces
set softtabstop=4    "
set shiftwidth=4     " auto indent length

au FileType Makefile set noexpandtab

" --- for python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\s\+$/

" -- for proto
 augroup filetype
   au! BufRead,BufNewFile *.proto setfiletype proto
 augroup end

" --- set highlight pmenu
"---ctermfg ctermbg is NR-8 for terminal 
"---guifg guibg are reverse here, i don't know why
highlight Pmenu ctermbg=7* ctermfg=0 guifg=#666666 guibg=#fbf3f4 
highlight PmenuSel ctermbg=4  ctermfg=7*  guifg=#1f82cd guibg=#dadd00
highlight PmenuSbar ctermbg=7*  ctermfg=0 guifg=#606060 guibg=Green  

"---- show 10 items in insert mode complete pop menu
set pumheight=10

" status line 
set laststatus=2
set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \ 
set statusline+=\ \ \ [%{&ff}/%Y] 
set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\ 
set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L

function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return '[PASTE]'
    else
        return ''
    endif
endfunction

autocmd FileType c,cpp,cc  set cindent

"Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"--------------------------------------------------------------------------- 
" Tip #382: Search for <cword> and replace with input() in all open buffers 
" replace the current word in all opened buffers
" map <leader>r :call Replace()<CR>
"--------------------------------------------------------------------------- 
fun! Replace() 
    let s:word = input("Replace " . expand('<cword>') . " with:") 
    :exe 'bufdo! %s/\<' . expand('<cword>') . '\>/' . s:word . '/ge' 
    :unlet! s:word 
endfun 


"--------------------------------------------------------------------------- 
" USEFUL SHORTCUTS
"--------------------------------------------------------------------------- 
" set leader to ,
let mapleader=","
let g:mapleader=","

" open the error console
map <leader>cc :botright cope<CR> 
" move to next error
map <leader>en :cn<CR>
" move to the prev error
map <leader>ep :cp<CR>
" close the quickfix window
map <leader>ec :ccl<CR>

" --- move around splits and maximize window
" move to and maximize the below split 
"map <C-J> <C-W>j<C-W>_
" move to and maximize the above split 
"map <C-K> <C-W>k<C-W>_
" move to and maximize the left split 
"nmap <C-H> <c-w>h<c-w><bar>
" move to and maximize the right split  
"nmap <C-L> <c-w>l<c-w><bar>
"set wmw=0                     " set the min width of a window to 0 so we can maximize others 
"set wmh=0                     " set the min height of a window to 0 so we can maximize others

" --- move around splits
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" move around tabs. conflict with the original screen top/bottom
" comment them out if you want the original H/L
" go to prev tab 
map <S-H> gT
" go to next tab
map <S-L> gt

" new tab
map <leader>tn :tabnew<CR>
" close tab
map <leader>tc :tabclose<CR> 
" first tab
map <leader>tf :tabfirst<CR>
" last tab
map <leader>tl :tablast<CR>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

" ,ps toggles paste mode
nmap <leader>ps :set paste!<BAR>set paste?<CR>

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

"  change working directory to that of the current file
map <F10> :lcd %:p:h<CR>

" refresh file manual
map <F5> :e!<CR>

" compile
map <F6> :make!<CR>
"--------------------------------------------------------------------------- 
" PROGRAMMING SHORTCUTS
"--------------------------------------------------------------------------- 
function! PTagIt()
    exec "ptag " . expand("<cword>")
endfunction

" open a preview tag window
nmap <leader>pt :call PTagIt()<CR>

" close a preview tag window
nmap <leader>pc :pc<CR>


" ,g generates the header guard
map <leader>g :call IncludeGuard()<CR>
fun! IncludeGuard()
   let basename = substitute(bufname(""), '.*/', '', '')
   let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
   call append(0, "#ifndef " . guard)
   call append(1, "#define " . guard)
   call append( line("$"), "#endif // for #ifndef " . guard)
endfun


" Enable omni completion. (Ctrl-X Ctrl-O)
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType c set omnifunc=ccomplete#Complete
"autocmd FileType java set omnifunc=javacomplete#Complete

" use syntax complete if nothing else available
"if has("autocmd") && exists("+omnifunc")
  "autocmd Filetype *
              "\	if &omnifunc == "" |
              "\		setlocal omnifunc=syntaxcomplete#Complete |
              "\	endif
"endif

set cot-=preview "disable doc preview in omnicomplete

" make CSS omnicompletion work for SASS and SCSS
"autocmd BufNewFile,BufRead *.scss             set ft=scss.css
"autocmd BufNewFile,BufRead *.sass             set ft=sass.css

"--------------------------------------------------------------------------- 
" ENCODING SETTINGS
"--------------------------------------------------------------------------- 
set encoding=utf-8                                  
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1

fun! ViewUTF8()
	set encoding=utf-8                                  
	set termencoding=big5
endfun

fun! UTF8()
	set encoding=utf-8                                  
	set termencoding=big5
	set fileencoding=utf-8
	set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
	set encoding=big5
	set fileencoding=big5
endfun


"--------------------------------------------------------------------------- 
" PLUGIN SETTINGS
"--------------------------------------------------------------------------- 

" --- AutoClose - Inserts matching bracket, paren, brace or quote 
" fixed the arrow key problems caused by AutoClose
if !has("gui_running")	
   set term=linux
   imap OA <ESC>ki
   imap OB <ESC>ji
   imap OC <ESC>li
   imap OD <ESC>hi

   nmap OA k
   nmap OB j
   nmap OC l
   nmap OD h
endif

" --- EasyMotion
"let g:EasyMotion_leader_key = '<Leader>m' " default is <Leader>w
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" --- TagBar
" toggle TagBar with F7
nnoremap <silent> <F7> :TagbarToggle<CR> 
let g:tagbar_autofocus = 1       " set focus to TagBar when opening it

" --- coffee-script
au BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw! " recompile coffee scripts on write

"---vimerl
filetype plugin indent on

let g:erlangManPath='/usr/lib/erlang/man'
let g:erlangHighlightBif = 1
let erlang_skel_header = {"author" : "slash", "owner" : "rockmonster.com"}

"-----NerdTree
map <leader>nt :NERDTreeToggle<CR>
map <F4> :NERDTreeMirror<CR>

"------ a.vim
" switch to .h or .cpp file in new tab or existing tab
map <a-o> :AT<CR>
map <a-i> :IHS<CR>

"--------ctrlp.vim
let g:ctrlp_map = '<C-Tab>'            " map c-t to open ctrlp plugin
let g:ctrlp_cmd = 'CtrlPBuffer'        " use this cmd to open ctrlp when you press above mapping
let g:ctrlp_by_filename = 1            " set default to search filename not path 
let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll|beam)$'
            \ }

"------conque shell
if has('win32')
    map <leader>sh :ConqueTermSplit Powershell.exe<CR>
    map <leader>shv :ConqueTermVSplit Powershell.exe<CR>
    map <leader>sht :ConqueTermTab Powershell.exe<CR>
else
    map <leader>sh :ConqueTermSplit bash<CR>
    map <leader>shv :ConqueTermVSplit bash<CR>
    map <leader>sht :ConqueTermTab bash<CR>
endif

let g:ConqueTerm_Color = 2
let g:ConqueTerm_SessionSupport = 0
let g:ConqueTerm_CWInsert = 1
let g:ConqueTerm_ReadUnfocused = 1
"----------------------------------------------------------------------------------------------------
"
" vim-go settings
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_types = 1

" YCM settings
" 选择补全项
let g:ycm_key_list_select_completion = ['', '']
let g:ycm_key_list_previous_completion = ['']
"let g:ycm_key_invoke_completion = '<C-Space>'

" -- 触发语义补全，输入2个字母后
"let g:ycm_semantic_triggers =  {
			"\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			"\ 'cs,lua,javascript': ['re!\w{2}'],
			"\ }
" -- 白名单
let g:ycm_filetype_whitelist = { 
            \ "c":1, "cpp":1, "objc":1, "sh":1, "zsh":1, "java":1,
            \ "go":1, "python":1, "erlang":1, "cs":1, "lua":1,
            \ "javascript":1,
			\ }

" --- UltiSnips setting
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
