*myvim.txt*   my vim note
*zlh* *myvim*
==============================================================================
/ #####  #    # #    #    #####  #    # #    #    #####  #    # #    #        /
/ #    # #    # ##   #    #    # #    # ##   #    #    # #    # ##   #        /
/ #    # #    # # #  #    #    # #    # # #  #    #    # #    # # #  #        /
/ #####  #    # #  # #    #####  #    # #  # #    #####  #    # #  # #        /
/ #   #  #    # #   ##    #   #  #    # #   ##    #   #  #    # #   ##        /
/ #    #  ####  #    #    #    #  ####  #    #    #    #  ####  #    #        /
==============================================================================

自定义映射                                      *myvim-custom-mapping*
KeyMapping                                      |myvim-mapping-basic|

插件用法                                        *myvim-plugins*
vim-go                                          |myvim-vim-go|
coc.nvim                                        |myvim-coc|
nerdTree                                        |myvim-nerdTree|
commenter                                       |myvim-nerdComenter|
tagbar                                          |myvim-tagbar|
leaderF                                         |myvim-leaderF|
easyMotion                                      |myvim-easyMotion|
terminal                                        |myvim-terminal|
easy-align                                      |myvim-easy-align|
visual-increment                                |myvim-visual-increment|
yankstack                                       |myvim-yankstack|
git                                             |myvim-git|

学习笔记                                        *myvim-note*
基础                                            |myvim-basic|
进阶                                            |myvim-step|
高级                                            |myvim-advanced|

==============================================================================
KeyMapping                                      *myvim-mapping-basic*

    leader=","      高频使用映射到space，其次映射到leader，最少使用的映射到ctrl
                    常用命令使用不要超过3个键

    <S-H>           下一个tab
    <S-L>           上一个tab
    <leader>tn      新tab
    <leader>tc      关闭tab
    <leader>/       取消高亮
    <leader>ps      打开关闭粘贴模式
    <leader>cd      切换当前目录到当前buffer所在目录

    <C-a>           命令模式home
    <C-e>           命令模式end
    <C-v>           命令模式和输入模式下粘贴0号寄存器

    <space>jkhl     窗口光标移动
    <space>q        只保留当前tab，其他的关闭

    <space>u        向前翻半页
    <space>d        向后翻半页
    <space>o        原来的ctrl-o，jumplist跳回来
    <space>i        原来的ctrl-i，jumplist跳向前
    <space>]        原来的ctrl-], tag跳转定义
    <space>t        原来的ctrl-t, tag跳转回原来的位置

==============================================================================
插件用法                                        只记录常用的快捷键
   
vim-go                                          *myvim-vim-go*

    :GoInstallBinaries    安装必须要的go tool bin
==============================================================================

coc.nvim                                        *myvim-coc*
    
    <C-j>   输入模式下强行刷新补齐
    [c      上一个错误提示
    ]c      下一个错误提示
    gd      调到定义
    gr      显示光标下单词的引用
    K       显示光标下单词的文档
    tab     选取补全项目

    <leader>rn  重命名当前光标下单词
    <space>a    显示错误提示的列表
    <space>m    显示当前buffer的函数列表

==============================================================================
tagbar                                          *myvim-tagbar*

    <F7>    显示和关闭tabbar
    <F8>    生成golang的tags

==============================================================================
leaderF                                         *myvim-leaderF*
    <leader>s       查找文件
    <leader>f       项目全文搜索
    <leader>b       buffer跳转

==============================================================================
easyMotion                                      *myvim-easyMotion*

    <space>w       往前跳 
    <space>b       往后跳

==============================================================================
terminal                                        *myvim-terminal*

    <F1>   显示和关闭terminal

==============================================================================
easy-align                                      *myvim-easy-align*

    <CR>    选中后回车，输入分隔符来对齐

==============================================================================
visual-increment                                *myvim-visual-increment*
    
    <C-a>  选中文本，增加
    <C-x>  选中文本，减少

==============================================================================
yankstack                                       *myvim-yankstack*

    <space>p  粘贴之前的选项

==============================================================================
git                                             *myvim-git*

    <leader>ga  在当前目录执行:Git add *
    <leader>gd  对当前buffer的文件执行:Gdiff

==============================================================================
commenter                                       *myvim-nerdComenter*

    <space>c 注释和反注释选中文本

==============================================================================
NerdTree                                        *myvim-nerdTree*
    
    <space>n    显示和关闭nerdtree
    <space>f    定位当前buffer在nerdtree的位置

    ?:     快速帮助文档
    o:     打开一个目录或者打开文件，创建的是buffer，也可以用来打开书签
    go:    打开一个文件，但是光标仍然留在NERDTree，创建的是buffer
    t:     打开一个文件，创建的是Tab，对书签同样生效
    T:     打开一个文件，但是光标仍然留在NERDTree，创建的是Tab，对书签同样生效
    i:     水平分割创建文件的窗口，创建的是buffer
    gi:    水平分割创建文件的窗口，但是光标仍然留在NERDTree
    s:     垂直分割创建文件的窗口，创建的是buffer
    gs:    和gi，go类似
    x:     收起当前打开的目录
    X:     收起所有打开的目录
    e:     以文件管理的方式打开选中的目录
    D:     删除书签
    P:     大写，跳转到当前根路径
    p:     小写，跳转到光标所在的上一级路径
    K:     跳转到第一个子路径
    J:     跳转到最后一个子路径
    <C-j>: 在同级目录和文件间移动，忽略子目录和子文件
    <C-k>: 在同级目录和文件间移动，忽略子目录和子文件
    C:     将根路径设置为光标所在的目录
    u:     设置上级目录为根路径
    U:     设置上级目录为跟路径，但是维持原来目录打开的状态
    r:     刷新光标所在的目录
    R:     刷新当前根路径
    I:     显示或者不显示隐藏文件
    f:     打开和关闭文件过滤器
    q:     关闭NERDTree
    A:     全屏显示NERDTree，或者关闭全屏

==============================================================================
学习笔记                                        *myvim-basic*

1.基本
     i    ---- 插入模式，在光标前插入
     a    ---- 在光标后插入
     esc  ---- Normal模式，该模式下输入都是命令。在输入模式下，ctrl-c ctrl-[ 都可以返回命令模式
     x    ---- 删当前光标所在的一个字符
     s    ---- 删除字符并进入插入模式
     d    ---- 删除
     y    ---- 拷贝
     r    ---- 替换单个字符
     R    ---- 替换多个字符，直到按下esc
     o    ---- 在当前行的后一行插入一行
     O    ---- 在当前行的前一行插入一行
     p/P  ---- 粘贴，p是粘贴到当前位置的后面，P是粘贴到前位置的前面
     ]p   ---- 格式化粘贴内容，比如整理好粘贴后的代码缩进
     "+p  ---- 跨程序复制粘贴，使用"+寄存器
     hjkl ---- 左下上右方向的光标移动

     dd  -- 剪切当前行
     yy  -- 拷贝当前行，等同于 Y
     ddp -- 调换2行顺序，就是先删除当前行，后一行会补上来变成当前行，再粘贴到当前行的下一行
     xp  -- 调换当前光标所在的字符和其后一个字符的位置

     :help cmd  ---- 显示cmd命令的帮助，退出为:q
     :e或 :open ---- 打开文件  :e + filename
     :e!  ------- 重新加载当前文件，或者是在vimrc中设置 set autoread
     :wq filename ---- 存盘并退出。:w存盘，:q退出，
     :wqall  -----------保存全部文件并退出，类似:qall为全部Buffer都退出
     :x    ----如果需要保存则保存，然后退出

     :saveas ---- 另存为
     :q! ----- 退出且不保存
     :bn，:bp  ---- 打开多个文件时，可用这2个命令，切换文件

     :<R1>,<R2> w <filename> ----- 将当前文件的第R1行开始到R2行的内容另存为filename的文件里，比如:2,44 w /tmp/test

     :mks [file]   ----  保存session文件，如果不指定file，则默认使用Session.vim。如果要重写已有的session文件，则用:mks! file，mks是mksession的缩写
     :source file  ---- 打开session文件，source是读取vim命令的意思
     gvim -S Session.vim  ---- vim启动时打开session文件

==============================================================================
2. 进阶                                          *myvim-step*
      |  --  竖线，到第一列， [count]|到第count列，比如3|
     cw  --  替换掉光标所在位置到一个单词结尾的字符，进入插入模式
     ciw --  替换掉光标所在的单词，光标可在单词的任何位置，进入插入模式
     diw --  删除掉光标所在的单词，光标可在单词的任何位置，不进入插入模式
     caw --  替换掉光标所在的单词，包括单词右边的空格，光标可在单词的任何位置，进入插入模式
     daw --  同上，只是不进入插入模式
     yiw --  复制一个单词，光标可以在单词的任何位置
     yaw --  复制一个单词，包括其左边的空格
     viw --  选中一个单词，进入visual模式，光标可以在单词的任何位置 注：iw其实是inner word的意思
     
     is  --  inner statement 一个句子
     vis --  选中一个句子，在erlang中就是一个函数
     dis --  删除一个句子
     cis --  更改一个句子
     it  --  inner tag ， tag是指<xx>的东西， <strong>something</tag>
     vit --  选中tag间内容
     dit --  删除tag间内容
     cit --  更改tag间内容

     vi( --  选中()间的内容，此时光标在()内，同理vi' , vi", vi{ 或 vi}，vi[ 或 vi] 都是一样的
     di( --  删除()间内容，参考上条
     yi( --  复制中间的内容，参考上条
     ci( --  更改()间的内容，参考上条
     vib --  vi(
     viB --  vi{

  文本对象：
     w,W --  单词
     p  --  段落
     s  --  句子
     b  --  括号  (
     B  --  大括号{
     t  -- tag，比如<strong>
     >  --   <> block
     "  --  双引号
     '  --  单引号
     [  --  方括号

    以上文本对象都可以使用 <action>i<obj>, <action>a<obj>的命令，比如
    dis, vis, yiw, diw, cib, =a{ 等。a命令是包含文本对象本身，i命令则不用

     c$  ---- 替换掉关标所在位置到行尾的字符，进入插入模式
     d$  ---- 删除关标所在位置到行尾的字符
     cc  -----等同于S
     D -----等同于d$
     C -----等同于c$
     S  ------ 删除整行，并进入插入模式
     
     c{motion} ---如上面的cw, c$， c是change的意思
     d{motion}  --- 如dw, de, dtX
     t ---- 是until的意思，所以dtX是删除字符直到遇到X。
     ctX --- 和dtX效果一样，但是会进入插入模式。 还有vtx, ytx等

     u  ----  undo
     Ctrl-r  --- redo
     .  ---- 小数点，重复上一次引起文本改变的一个命令，包括删除，输入，替换，缩进，变换大小写等，
               该命令十分有用，多用可以大大减少键入，可以说是the vim way的标志命令。
     N<cmd> ---- 重复某个命令N次，比如3dd，3fa， 3yy

     v  ----  可视化选择，以字符为移动单位。选完后，可以用o，使光标在选中区域的头和尾位置切换。
     V ------ 可视化选择，以行为移动单位
     gv ----- 重新选出上一次visual模式选中的区域

     ~      ------ 光标所在位置的字母转换大小写
     3~    ------ 光标所在位置的3个字母转换大小写
     gUw  ---- 光标所在位置的单词变大写
     guw  ---- 光标所在位置的单词变小写
     guu  ----- 光标所在行全部变小写
     gUU ----- 光标所在行全部变大写
     gu{motion} ---- 比如guw, guis, guib等
     visual-u/U  -- 可见模式下选中文本后，u使其全部变小写，U使其全部变大写

     ga   ----- 显示光标所在位置的ascii码，包括(10, 16进制）。
     g8 ----- 显示光标所在字符的utf8编码。
 
     gf   -----  打开当前光标下路径所指的文件，或者是Include里的头文件。和a.vim插件里的:IHS（我配置里alt-i）命令差不多
     gt  ---- 下一个标签页
     gT ----  上一个标签页

     :diffs   ---- 其实是:diff split，开一个文件比较窗口，比较当前文件

     :ce    ----- center，对所在行或选中的文本居中
     :le     ----- left , 对所在行或选中的文本左对齐
     :ri    ------- right, 对所在行或选中的文本右对齐

     zf  ------ 折叠代码块。比如zfa{
     zo ------ 打开代码块

----------------------------------------------------------------------------------------
     :sh  ----- 从vim进入shell， 退出shell后会回到vim，退出shell可以使用exit命令或者Ctrl-D
     :! <shell cmd>  --- 执行外部命令，比如 !ls
     :! sort   -----  对选中的文本排序，按行排序

     :r  !<shell cmd> ----- 可以将shell的命令执行后的结果插入当前文档，比如 :r !pwd
     :r  <filename>   -----将filename的文档插入当前文档

     vim也可以从stdin读取数据，比如要编辑某个命令输出的内容：
     ls | vim -
     netstat | vim -
     vim后面的 - 表示，要编辑的内容是从stdin中读取的

----------------------------------------------------------------------------------------------------
光标移动：

     NG  或 :N --- 到第N行
     gg    --- 到第一行，相当于:1 或:1G
     G     --- 到最后一行
     H    ---- 到当前屏幕的开始
     M    ---- 到当前屏幕的中间，即移动光标到屏幕中间
     L    ----- 到当前屏幕的底部

     zz   ----- 将当前行滚动到屏幕的中间，没有改变光标位置，只是滚动屏幕
     zt   ------- 将当前行滚动到屏幕最上方
     zb  ------- 将当前行滚动到屏幕最下方   

     zh  ------ 屏幕往左滚一列
     zl   ------ 屏幕往右滚一列
     zH ------ 屏幕往左滚半屏
     zL  ------ 屏幕往右滚半屏
     ze  ------ 屏幕滚到最右边，光标放在最后处, z-end
     zs  -------屏幕滚到最左边， 光标放在最开始处, z-start

     Ctrl-u  ----- 向上滚半屏，up
     Ctrl-d  ----  向下滚半屏, down
     Ctrl-b ------ 向上翻一页, backward
     Ctrl-f  ------ 向下翻一页, forward

     w   ----- 到下一个单词的开头，W为到下一长单词开头，
                  所谓长单词，就是以空格为分割符的单词，比如 abc/kkk/we，
                  是三个单词组成的一个长单词
     e    -----到下一个单词的结尾，E为到下一长单词结尾
     b   ----- 到前一个单词开头，B为到前一长单词开头，
    ge  ------ 到前一个单词的结尾
     (    ----- 到前一个句子，比如说在erlang中就是跳一个函数，因为是以.作为一个句子结尾。
     )    ----- 到后一个句子
     {    ------ 前一个段落，以空行为分隔
     }    ------  后一个段落，以空行为分隔

     0     --- 数字0，到行头
     $     ---- 到行尾
     ^     ---- 到本行第一个不是blank字符的位置， 或者 _ 和 ['，推荐下划线 _
     g_    -----到本行最后一个不是blank字符的位置
     /foo  ---- 搜索foo的字符串，如果搜索出多个，按n键到下一个

 （ 文中命令的x可以指代任何字符）
     fx     -----在本行，往右，跳到下一个为x的字符处
     tx     ---- 在本行，往右，跳到x的前一个字符的位置
     Fx     ----与fx相同，只不过往左
     Tx     ----与tx相同，只不过方向往左
     注意：以上4个命令使用 ; 来重复执行，以 , 来反方向执行。移动到其他行也可以继续用;,

     %   ----- 括号匹配移动，包括 ( { [，跳到对应的括号上
                   如果当前光标不在括号上，%会跳到当前行的第一个括号上，这比f(, f{ 快一些

     *和# ---- 搜索当前光标所在的单词
      n  ------- 下一个搜索结果的位置
      N -------  上一个搜索结果的位置
      gd -------  搜索当前光标所在单词，光标出现在第一个结果上， （如果是局部变量，则出现在其定义处，如果是全局变量
                 则出现在其第一次引用处，也就是gD的用处）
       [I  ------ 列出本文件和include 的文件里所有和当前光标下单词匹配的行

      ''  -------光标移动到上一个跳转位置所在行的开始，连按2次'，''只能在当前位置和上一个跳转位置中来回震荡
      `` ------- 同上，只不过是跳到光标的具体位置
      Ctrl + o  ---- 光标的上一个跳转位置，jumplist里的位置都可以跳回去
      Ctrl + i   ---- 光标的下一个跳转位置
      :jump  ----- 列出jumplist

      ma ---- 在光标所在行做一个书签a
      'a    ---- 跳到书签a所在行的开始，只限本文件，是本缓冲区书签
      'A  ----- 跳到书签A所在行的开始，可以跨文件，是全局标签，可以用Ctrl + o跳回来
      `a  ------ 跳到书签a所在行的光标的位置
      :marks ---- 显示全部的书签
      :delm a  ---- 删除a书签
      :delm !   ----- 删除全部书签
      Ctrl - ^  ----- 交替文件，也就是可以在2个文件中交替跳转

      :changes ---- 显示修改的列表
       g;   ------- 跳到上一个修改的位置
       g,   ------- 跳到下一个修改的位置
       '.    --------跳到文件最后修改处，即使关闭vim重启后也可以

  tags  
      在源代码目录src下，使用
       ctags *.c  或  ctags  *.cpp   或 ctags *.erl
      如果在顶层目录，则可以使用-R选项递归扫描目录，只生成一个tag文件，
       ctags -R *.erl

      会生成tag文件，然后就可以使用tag来进行定位了
      Ctrl + ]   -----   光标在函数上时，跳到函数的定义（函数， 变量， 结构体， 宏等都可以）
      Ctrl + t   -----   跳转回上一个标签
      Ctrl-w -]  ----- 在当前tab里分割一个预览窗口显示tag的定义
      
      :tag foo 或 :ta foo  -----   跳到标签foo处，foo可以是函数名，变量名，结构体名，宏
      :ptag foo 或 :pta foo ---- 在预览窗口打开标签foo处，光标位置不会发生改变，我的配置,pt
      :pclose  或 :pc  ----- 关闭预览窗口，我的配置,pc

      :ts foo  --- 列出全部的foo标签, ts是tselect的缩写
      g]   ----- tselect光标所在的标签上 

       如果一个符号对应多个tag:
      :tn  -----  跳到下一个
      :tp  -----  跳到前一个
      :ts  ---- 列出全部，即:tselect
                      
      在erlang中，ctags只会对函数，宏建立tag，所以跳转也是针对这2个

tabpage
     :tabnew  ----- 新建tab，我的配置里 ,tn
     :tabclose ----- 关闭tab,  我的配置 ,tc
     :tabfirst  ------ 到第一个标签页
     :tablast ------  到最后一个标签页
     :tabo      ----- 关闭所有其他标签页
     :tabm  N ----- 移动tab到第N个tab的后面，N为序号，左边第一个为0，不写N，默认是最后一个
                          :tabm 1将当前tab移动到第一个tab的后面
      gt   ------- 下一个tab, 我的配置里是L
      gT  ------- 上一个tab, 我的配置里是H
------------------------------------------------------------------------------------------------
代码块跳转
     C/C++, Java等语言函数和语句是以{}分块，以下快捷键是在代码块中跳转，首先要记住2个
     [ {  ----  往前移
     ] }  ----  往后移

搜索和替换：
     :s/to_match/replacement       在当前行用replacement去替换第一个to_match字符串
     :1,10s/to_match/replacement       在第1行到第10行（包括第1和第10）用replacement去替换第一个to_match字符串
     :10s/to_match/replacement       在第10行用replacement去替换第一个to_match字符串
     :s/to_match/replacement/g    在当前行用replacement去替换全部to_match字符串 
     :%s/to_match/replacement/g  在全篇文章中替换匹配的字符串，g是选项表示全部替换，否则只替换第一个
                                                    选项还有c -- confirm 询问， i -- ignore，忽略大小写， e --- error 忽略错误
                                                    选项可以组合用，如cgi, gie等
     比较有意思的选项是n，意思是报告数目，比如：
    :%s/to_match/replacement/gn  --- 只报告匹配的数目，不会真正去替换,要是只想替换一个单词，最好把to_match包起来，像这样： \<to_match\>

     & ----- 重复上述的:s命令，不过不带选项，也就是说没有g, c等选项
     :&& ---- 重复上述的:s命令，不过保持原来:s命令的选项
     g&  ----- 重复:%s命令和:s命令，如果重复的是:s命令，会应用到全部文章，也就是变成:%s

     :g/patern/d ----- 删除全文中包含patern的行，patern可以是正则表达式
     :g!/patern/d ----- 删除全文中不包含patern的行
     这其实是命令行模式的全局命令：
     :<range> g/{pattern}/<cmd>， range表示范围， cmd有y, d, copy, move, join， print等
     正则表达式见 vim正则表达式

     搜索指定目录的全部文件，vimgrep
     :vimgrep  /to_match/j  **    (j是指只更新quickfix窗口，不跳转， **是指当前目录的全部文件)
     :vimgrep /to_match/j  *.c  *.h 
     :vimgrep /to_match/j   src/*  include/*
     :vimgrepa ----- 将搜索结果加到当前的quickfix窗口，而不是另开一个


     :args path/files  ----- 获得指定目录的指定文件作为参数
     :argdo <cmd> | update ------ 对args里的获得的全部文件做<cmd>命令， update表示如果发生改变，写入文件
     比如最常用的指定文件替换单词：
     :args *.c  ----- 将当前目录下的全部C文件作为参数
     :argdo %s/to_match/replacement/ge | update ---- 对args命令里获得的全部文件做全局替换命令,e标志表示 忽略改文件中没有to_match内容的错误

组合命令：
     光标移动很重要，可以配合很多命令来完成功能，一般的模式是：<start position> <cmd> <end position>，如0y$
     还有常用的就是<cmd><end position>，比如说d$, dw，dj, y2j。y2j是复制当前行和其下2行，因为y是动作，2j就是2次执行j所到达的行。

==============================================================================
3.高级                                      myvim-advanced
    :m N  ----- 将当前行移动到第N行的后面
    :m 'a  ----- 将当前行移动到书签a所在行的后面
     v ------ 可视化选择
     dtx ---- 删除所有内容，直到遇到字符x
      J   ----- 将下一行连接到当前行行尾
     gJ  ----- 同J，不过会删除两行之间的空格
      K   ----- 寻找光标下的单词的man page

     < 或 > ---- 左右缩进。缩进也是一个动作命令，后面可以跟motion
     << 或 >>  ---- 左右缩进当前行
     >G    ----- 从当前行到文件结尾的行都向右缩进
     >j     ------向右缩进当前行和下一行

     =   ------ 自动缩进，
     == ----- 缩进当前行
     gg=G  ---- 全篇文章缩进
     =a{   ---- 缩进当前{}块里的代码块，包括{本身也参与缩进
     =j   ----- 缩进当前行和下一行
  
     gq   ------ 重新排版，假如已经设定行宽的话(:set textwidth = 78)，gq命令会格式化选中文本，
                    将行宽设定为指定的， gq是一个命令，一般是gq{motion}，常用的组合有：
                     gqq  ----  排版一行
                     gqa{  ----- 排版{}内代码块
                     gq4j  ----- 排版当前5行
                     gggqG ---- 排版全文
     {visual}-gq --- 排版visual下选中的文本

     g Ctrl + g  ---- 统计全文单词总数
     :N1, N2p ----  在命令行窗口中打印第N1行到第N2行的内容，比如 :4,8p

     :cl  ---- 打开一个新buffer, 列出所有的错误
     :cn --- 跳到Quickfix窗口里的下一个结果所在行，我的配置    ,en
     :cp --- 跳到Quickfix窗口里的上一个结果所在行，我的配置    ,ep
     :cw  ---- 打开quickfix窗口
     :ccl    ----- 关闭quickfix窗口, 我的配置  ,ec
     :col  ----- 打开前一个quickfix窗口
     :cnew ----- 打开后一个quickfix窗口

     Ctrl-a ---- 在光标下的是一个数字的话，该数字会加1
     Ctrl-x  ----- 在光标下是一个数字的话，该数字会减1
     Ctrl-z  ----- 最小化vim窗口

    命令模式下粘贴内容，在命令行中输入
    Shift + insert  ---- 所有Linux终端都支持的粘贴命令
    Ctrl + insert   ----- 所有Linux终端都支持的复制命令
    Ctrl-r " ------ 默认使用"寄存器，如果是其他寄存器，比如说a，则是ctrl-r a
                         其实Ctrl-r<register>就是在插入模式下粘贴寄存器内容的快捷键
    Ctrl-r Ctrl-w ---- 命令模式下将当前光标下的单词（短单词word）粘贴到命令行
    Ctrl-r Ctrl-a -----命令模式下将当前光标下的单词（长单词WORD）粘贴到命令行
     
补全
     Ctrl-n ---- 在插入模式下，输入字符然后，按下Ctrl + n。
     Ctrl-p  -----也是自动补齐，本次vim进程出现的所有单词。

插入模式快捷键
     Ctrl-w ---- 在插入模式下，删除光标前的一个word，linux终端里也可以这么用
     Ctrl-u  -----在插入模式下，删除当前行光标前面的内容，linux终端页可以这么用
     Shift-Left --- 插入模式下，往左移动一个单词
     Shift-Right ---插入模式下，往右移动一个单词
     Home, End ---- 行首，行尾
     Ctrl-a  ---- 插入模式下，重复输入自从上次Normal mode以来输入的内容，非常有用
     Ctrl-r 0 ---- 插入模式下，粘贴寄存器的内容, 0就是第二个寄存器
 
    其实在VIM中尽量少在插入模式下，除了输入的时候，都要呆在Normal模式，这样效率更高。

插入模式到normal模式：
    esc ----- 最常用的
    Ctrl-[ ----- 也是从插入模式到normal模式
    Ctrl-c ----- 也是从插入模式到normal模式
    Ctrl-o ---- 进入insert normal mode，也就是进入normal mode后，执行完一个命令后，马上进入插入模式
                     这个非常有用。

块操作：
     windows下为Ctrl-q，linux下为Ctrl-v
     一般顺序为：0  Ctrl-v  j  I  xx  esc
     比如要在多行语句面前加注释，操作为：
     1. 移动光标到第一行行头， ^
     2. Ctrl - v ，开始块操作
     3. 移动光标到最后一行，各种移动光标的命令都可以
     4. 输入大写I，然后//， I//
     5. 按esc键为每一行生效

     如果想在多行语句后面加字符串xxx，则第4，5步的命令分别为：
     $到行后，A, 输入字符xxx，按esc。区别在于I与A

     I ---- 相当于^i
     A ---- 相当于$a

宏录制：
     1. qa 把操作记录在寄存器a，寄存器必须是a~z
     2. 输入一系列命令
     3. q停止录制
     3. @a 重放被录制的宏， @@是重放最新录制的宏

文件格式和编码
     :set fileformat=unix,dos  设定文件格式，是Unix下的文件或者是dos下的文件，这些文件主要是换行等字符是不一样的
     :set fileencoding=utf-8    设定文件编码

编辑二进制文件
     使用-b参数启动，如：
      gvim -b datafile

      查看文件hex，可以使用vim自带的程序xxd，如下：
      :%!xxd
      %是全文，也可以选中文本操作，然后输入:!xxd
       !是执行外部命令，因为xxd是外部程序

       转换完后，可以编辑hex文件。将hex转换回来：
       :%!xxd -r
       
编译程序
        在VIM中可以直接编译程序，使用
        :make  -----  会调用gnumake编译当前目录下的Makefile，并将错误显示到quickfix窗口
                             :cn, :cp来定位错误位置
        如果要使用其他编译器，比如在windows下可以设定makeprg，详见vimhelp usr_30.txt

崩溃恢复
      使用 -r 参数启动vim，打开对应的swap文件
      vim -r xx.swap
 
4. 分屏
     分屏启动vim，大写的O来垂直分屏，n是文件数量
     vim -On file1  file2

     使用小写的o来水平分屏
     vim -on file1 file2

     Ctrl+w c  -- 关闭当前分屏
     Ctrl+w s  -- 水平分割当前打开的文件
     Ctrl+w v  --  垂直分割当前打开的文件
     
     :sp filename --- 水平分割，并打开新文件，没有filename默认是打开当前文件
     :vsp (或者 :vs ) filename --- 垂直分割，并打开新文件，没有filename默认是打开当前文件

      Ctrl+w hjkl ---- 移动光标到不同的分割屏，我的配置里ctrl + hjkl
      Ctrl + w HJKL --- 移动分屏

     Ctrl+w =  ---- 所有屏具有相同高度
     Ctrl+w N+  ---- 增加高度，N为数字
     Ctrl+w N-  ---- 减少高度
     Ctrl+w N>  ---- 增加宽度     
     Ctrl+w N<  ---- 减少宽度     

buffer, window, tab
     buffer ---- 一个打开的文件，buffer是最新的，已修改但尚未保存的内容都在buffer里。
                         因此当buffer要切换的时候，vim要求先保存，后切换。
     window ----- buffer的viewport，分屏就是一个window。
                          一个buffer可以对应一个或多个window，比如说在多个分屏中打开一个文件
     tab      ------ 一个或多个window的集合，比如说一个tab里有多个分屏

