"-----------------------------------------------------------
" when you slow down
" Stop And Think
" is there another way to speed up ?
"-----------------------------------------------------------

" General Settings
set nocompatible	" not compatible with the old-fashion vi mode
set bs=2		    " allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set ruler		    " show the cursor position all the time
set autoread		" auto read when file is changed from outside
set number

filetype off          " necessary to make ftdetect work on Linux
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

syntax enable
syntax on		    " syntax highlight
set hlsearch		" search highlighting

set showmatch		" Cursor shows matching ) and }
set showmode		" Show current mode
set wildchar=<TAB>	" start wild expansion in the command line using <TAB>
set wildmenu        " wild char completion menu

" tab show setting
" only show filename, exclude dir
set guitablabel=%m%t

" ignore these files while expanding wild chars
set wildignore+=*.o,*.class,*.pyc,*.swp

set autoindent		" auto indentation
set smartindent     " smart indent
set incsearch		" incremental search
set nobackup		" no *~ backup files
set copyindent		" copy the previous indentation on autoindenting
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to context

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set expandtab        "replace <TAB> with spaces, use space only
set tabstop=4        "define <TAB> equal 4 spaces
set softtabstop=4    "
set shiftwidth=4     " auto indent length

set clipboard=unnamed  " share system cliboard
set winaltkeys=no       " don't use alt key

set splitbelow  " split buffer below
set splitright  " split buffer right

" open cl buffer when a quickfix command be executed
autocmd QuickFixCmdPost * :cw 

" 最后编辑的文件保存光标，下次打开该文件自动停留在上次编辑的地方
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"-----------------------------------------------
" pmenu
"-----------------------------------------------
" show 10 items in insert mode complete pop menu
set pumheight=20

"disable doc preview in omnicomplete
set cot-=preview 

"-----------------------------------------------
" file type
"-----------------------------------------------
au FileType Makefile set noexpandtab

" --- for python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\s\+$/

" -- for proto
 augroup filetype
   au! BufRead,BufNewFile *.proto setfiletype proto
 augroup end

" -- cindent
autocmd FileType c,cpp,cc  set cindent

"--------------------------------------------------------------------------- 
" USEFUL SHORTCUTS
"--------------------------------------------------------------------------- 
" set leader to ,
let mapleader=","
let g:mapleader=","

" --- move around splits
nmap <silent> <space>j :wincmd j<CR>
nmap <silent> <space>k :wincmd k<CR>
nmap <silent> <space>h :wincmd h<CR>
nmap <silent> <space>l :wincmd l<CR>

" move around tabs. conflict with the original screen top/bottom
" comment them out if you want the original H/L
" go to prev tab 
map <S-H> gT 
" go to next tab
map <S-L> gt 

" new tab
map <leader>tn :tabnew<CR> 
" close tab
map <leader>tc :tabclose<CR> 
" tab only
noremap <space>q :tabo<CR>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" ,ps toggles paste mode
nmap <leader>ps :set paste!<BAR>set paste?<CR>

" 自动切换到当前文件所在的目录 cdpath
map <leader>cd :cd %:h<CR>

" Bash like keys for the command line
cnoremap <C-a>   <Home>
cnoremap <C-e>   <End>

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

" 使用c-v
cnoremap <C-V> <C-R>0
inoremap <C-V> <C-R>0

" 代替c-u, c-d翻页
nnoremap <silent> <space>u <C-U>
nnoremap <silent> <space>d <C-D>

" 交换`和'
nnoremap ' `
nnoremap ` '

" 搜索的时候保持屏幕在中央
nnoremap * *zz
nnoremap # #zz
nnoremap n nzz
nnoremap N Nzz

nnoremap g; g;zz
nnoremap g, g,zz

" 更好地使用跳转列表
noremap <space>o <C-o>
noremap <space>i <C-i>

" tag跳转重新映射
noremap <space>] <C-]>
noremap <space>t <C-t>

"--------------------------------------------------------------------------- 
" PROGRAMMING SHORTCUTS
"--------------------------------------------------------------------------- 

" ,g generates the header guard
" map <leader>g :call IncludeGuard()<CR>

fun! IncludeGuard()
   let basename = substitute(bufname(""), '.*/', '', '')
   let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
   call append(0, "#ifndef " . guard)
   call append(1, "#define " . guard)
   call append( line("$"), "#endif // for #ifndef " . guard)
endfun

"--------------------------------------------------------------------------- 
" ENCODING SETTINGS
"--------------------------------------------------------------------------- 
set encoding=utf-8                                  
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1,cp936,gbk,gb18030

lang messages zh_CN.UTF-8 " 解决consle输出乱码 
" lang messages en_Us.UTF-8 " 解决consle输出乱码 

fun! ViewUTF8()
	set encoding=utf-8                                  
	set termencoding=big5
endfun

fun! UTF8()
	set encoding=utf-8                                  
	set termencoding=big5
	set fileencoding=utf-8
	set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
	set encoding=big5
	set fileencoding=big5
endfun

"--------------------------------------------------------------------------- 
" PLUGIN SETTINGS
"--------------------------------------------------------------------------- 
" 插件开始的位置
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'

" Vim 中文文档
Plug 'yianwillis/vimcdoc'

" git plugin
Plug 'tpope/vim-fugitive'

" 可以在文档侧边中显示 git 信息
Plug 'airblade/vim-gitgutter'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 配色方案
Plug 'rakr/vim-one'
Plug 'liuchengxu/space-vim-theme'
Plug 'tomasiser/vim-code-dark'
Plug 'drewtempelmeyer/palenight.vim'

" go 主要插件
Plug 'fatih/vim-go', { 'tag': '*' }

" 补全插件
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" markdown 插件
Plug 'iamcco/markdown-preview.vim'

" leaderF
if(has("win32") || has("win64"))
    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
else
    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
endif

" 文本编辑相关插件
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'triglav/vim-visual-increment'
Plug 'junegunn/vim-easy-align'

" toggle terminal
Plug 'pakutoma/toggle-terminal'

" 启动屏插件
Plug 'mhinz/vim-startify'

" 插件结束的位置，插件全部放在此行上面
call plug#end()

"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 0
let g:go_list_type = "quickfix"
let g:go_metalinter_command = "golangci-lint"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:go_def_mode = 'gopls'
let g:go_info_mode = 'gopls'
let g:go_def_mapping_enabled = 0 
let g:go_doc_keywordprg_enabled = 0 " use coc' K

"==============================================================================
" coc.nvim 插件
"==============================================================================
" 装完coc后需要配置gopls作为lsp server
" :CocConfig
"{
"  "languageserver": {
"    "golang": {
"      "command": "gopls",
"      "rootPatterns": ["go.mod"],
"      "filetypes": ["go"]
"    }
"  },
  "suggest.maxPreviewWidth": 200
"}
"
" 安装coc-list
" :CocInstall coc-lists
" coc-list操作界面的key map，见:h coc-list-mappings
"
" 安装coc-json, 提供配置补全
" :CocInstall coc-json
"
" 遇到问题，可以重启coc服务
" :CocRestart
" ------------------------------------------------------
" if hidden is not set, TextEdit might fail.
set hidden
set nowritebackup

" Better display for messages
" set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-j> to trigger completion，强行触发补全
inoremap <silent><expr> <C-j> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)

" 列出当前光标所在单词的引用
nmap <silent> gr <Plug>(coc-references)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)

" Use K to show documentation in preview window
nnoremap <silent>K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word -- 重命名当前光标所在单词
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>

" Find symbol of current document 可以当作alt-m用
nnoremap <silent> <space>m  :<C-u>CocList outline<cr>

"==============================================================================
" NerdTree 插件
"==============================================================================
" 打开和关闭NERDTree快捷键
map <space>n :NERDTreeToggle<CR>
map <F4> :NERDTreeMirror<CR>

" 自动定位到nerdtree
map <space>f :NERDTreeFind<CR>zz

" 是否显示隐藏文件
let NERDTreeShowHidden=1

" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.git']

"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================

" majutsushi/tagbar 插件打开关闭快捷键
nnoremap <silent> <F7> :TagbarToggle<CR> 

" set focus to TagBar when opening it
let g:tagbar_autofocus = 1       

"gotag使用方法: gotags -f tags -R .
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

fun! GenGoTags()
   execute('!gotags -f tags -R .') 
endfun

nnoremap <silent> <F8> :call GenGoTags()<CR> 

"==============================================================================
"  leaderF -- echo g:Lf_fuzzyMatch_C
"==============================================================================
nnoremap <silent> <leader>s :Leaderf --nameOnly file <CR> 
nnoremap <silent> <Leader>b :Leaderf  --nameOnly buffer <CR> 
nnoremap <silent> <Leader>f :Leaderf  --nameOnly --cword rg -i <CR> 

let g:Lf_StlSeparator = { 'left': '', 'right': '' }
let g:Lf_StlColorscheme = 'one'
let g:Lf_ReverseOrder = 1

"==============================================================================
"  EasyMotion
"==============================================================================
" 使用<space>w, <space>b来跳转
map <space> <Plug>(easymotion-prefix)

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"==============================================================================
"  vim-terminal
"==============================================================================
tnoremap <silent> <F1> <C-W>:ToggleTerminal<CR>
nnoremap <silent> <F1> :ToggleTerminal<CR>

" set your favorite shell
let g:toggle_terminal#command = 'powershell'
if has("linux") || has("mac")
    let g:toggle_terminal#command = 'bash'
endif

" set terminal window position (:help vertical)
let g:toggle_terminal#position = 'botright'

"==============================================================================
"  yankstack
"==============================================================================
" :Yank命令查看当前的循环列表内容
call yankstack#setup()
nmap Y y$
nmap <space>p <Plug>yankstack_substitute_older_paste
" nmap <space>P <Plug>yankstack_substitute_newer_paste

"==============================================================================
" vim-easy-align
"==============================================================================
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"==============================================================================
" airline
"==============================================================================
let g:airline_section_b = ' %{fugitive#head()}'
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#whitespace#checks = []     " 不检查space用法是否错误

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

"==============================================================================
" visual-increment
"==============================================================================
" 下面设置ctrl-a,ctrl-x光标下的base进制
set nrformats=alpha,octal,hex

"==============================================================================
" nerdcommenter
"==============================================================================
" 自动注释的时候添加空格
let g:NERDSpaceDelims=1
nmap <space>c <plug>NERDCommenterToggle

"==============================================================================
"  其他插件配置
"==============================================================================
" markdwon 的快捷键
map <silent> <F5> <Plug>MarkdownPreview
map <silent> <F6> <Plug>StopMarkdownPreview

" git setting
let g:gitgutter_max_signs = 9999  " 一个buffer里最多显示sign数量

" startify
let g:startify_change_to_dir = 0

"==============================================================================
" GUI的设置要放在最后，加载完插件后
"==============================================================================
" colorscheme --[space_vim_theme, palenight, one, codedark]
" let g:airline_theme -- [ palenight, one, codedark]

function! SetFrontNTheme()
    if(has("win32") || has("win64"))
        au GUIEnter * simalt ~x  " 设置启动时窗口的大小
        set guifont=Source\ Code\ Pro:h13
        colorscheme palenight 
        set background=dark 
        let g:airline_theme='palenight'
    elseif has("linux")
        set lines=999 columns=999
        set guifont=Courier\ New:h14
        colorscheme codedark 
        set background=dark 
        let g:airline_theme='codedark'
    elseif has("mac")
        set lines=999 columns=999
        set guifont=Source\ Code\ Pro:h18
        colorscheme one 
        set background=dark 
        let g:airline_theme='one'
    endif 
endfunction

if has("gui_running")	
  set guioptions -=T    " not toolbar
  set guioptions -=m    " not menubar
  set guioptions -=b    " not bottom scroll bar
  set guioptions -=l    " not left hand scroll bar
  set guioptions -=r    " not right hand scroll bar
  set guioptions -=L    " not left hand scroll bar in vsplit windows
  set guioptions -=R    " not rihgt hand scroll bar in vsplit windows
  set termguicolors

  :call SetFrontNTheme()
  set cursorline        " highlight current line
  highlight CursorLine          guibg=#003853 ctermbg=24  gui=none cterm=none
else
  " terminal color settings
  colors vgod
endif

"==============================================================================
" my macros
"==============================================================================
let @a = '_f*s:proto.w~ea(),lDj'
