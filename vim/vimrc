"-----------------------------------------------------------
" when you slow down
" Stop And Think
" is there another way to speed up ?
"-----------------------------------------------------------

" General Settings
set nocompatible	" not compatible with the old-fashion vi mode
set bs=2		    " allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set ruler		    " show the cursor position all the time
set autoread		" auto read when file is changed from outside
set number
set hidden
set nowrap          " 不折行显示

filetype off          " necessary to make ftdetect work on Linux
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

syntax enable
syntax on		    " syntax highlight
set hlsearch		" search highlighting
set incsearch		" incremental search

set showmatch		" Cursor shows matching ) and }
set showmode		" Show current mode
set wildchar=<TAB>	" start wild expansion in the command line using <TAB>
set wildmenu        " wild char completion menu
set wildignore+=*.o,*.class,*.pyc,*.swp " ignore these files while expanding wild chars

set autoindent		" auto indentation
set smartindent     " smart indent
set nowritebackup   " no backup file for over write
set nobackup		" no *~ backup files
set copyindent		" copy the previous indentation on autoindenting
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to context

set expandtab        "replace <TAB> with spaces, use space only
set tabstop=4        "define <TAB> equal 4 spaces
set softtabstop=4    " only space
set shiftwidth=4     " auto indent length

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set clipboard=unnamed  " share system cliboard
set winaltkeys=no       " don't use alt key

set splitbelow  " split buffer below
set splitright  " split buffer right

set laststatus=2      " always show statusline
set display+=lastline " Always try to show a paragraph’s last line.
set guitablabel=%m%t  " tab show setting only show filename, exclude dir
set pumheight=20      " show 10 items in insert mode complete pop menu
set cot-=preview      " disable doc preview in omnicomplete

" open cl buffer when a quickfix command be executed
autocmd QuickFixCmdPost * :cw

" 最后编辑的文件保存光标，下次打开该文件自动停留在上次编辑的地方
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

set tags=./.tags;,.tags

" 不限制做字符串匹配使用的内存
set maxmempattern=2000000

"-----------------------------------------------
" file type
"-----------------------------------------------
au FileType Makefile set noexpandtab

" --- for python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\s\+$/

" -- for proto
 augroup filetype
   au! BufRead,BufNewFile *.proto setfiletype proto
 augroup end

" -- cindent
autocmd FileType c,cpp,cc  set cindent

"---------------------------------------------------------------------------
" USEFUL SHORTCUTS
"---------------------------------------------------------------------------
" set leader to ,
let mapleader=","
let g:mapleader=","

" --- move around splits
map <silent> <space>j :wincmd j<CR>
map <silent> <space>k :wincmd k<CR>
map <silent> <space>h :wincmd h<CR>
map <silent> <space>l :wincmd l<CR>

" go to prev tab
map <S-H> gT
" go to next tab
map <S-L> gt

" new tab
map <leader>tn :tabnew<CR>
" close tab
map <leader>tc :tabclose<CR>
" tab only
map <leader>to :tabo<CR>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" ,ps toggles paste mode
nmap <leader>ps :set paste!<BAR>set paste?<CR>

" 自动切换到当前文件所在的目录 cdpath
map <leader>cd :cd %:h<CR>

" Bash like keys for the command line
cnoremap <C-a>   <Home>
cnoremap <C-e>   <End>

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

" 使用c-v
cnoremap <C-V> <C-R>0
inoremap <C-V> <C-R>0

" 翻半页比较闪，用8j吧
nmap <silent> <space>u 8k
nmap <silent> <space>d 8j

" 使用精确mark跳转
nnoremap ' `

" 搜索的时候保持屏幕在中央
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> n nzz
nnoremap <silent> N Nzz

nnoremap g; g;zz
nnoremap g, g,zz

" 更好地使用跳转列表
nmap <space>o <C-o>
nmap <space>i <C-i>

" tag跳转重新映射
nmap <space>] <C-w>]
nmap <space>t <C-t>

" buffer切换
nmap <space>r <C-^>

" 关闭当前buffer
nmap <space>q :q<CR>

" 保存文件
nmap <space>s :w<CR>

" 刷新文件内容
nmap <silent> <space>e :e<CR>

"---------------------------------------------------------------------------
" ENCODING SETTINGS
"---------------------------------------------------------------------------
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1,cp936,gbk,gb18030

lang messages zh_CN.UTF-8 " 解决consle输出乱码
" lang messages en_Us.UTF-8 " 解决consle输出乱码

"---------------------------------------------------------------------------
" PLUGIN SETTINGS
"---------------------------------------------------------------------------
" 插件开始的位置
call plug#begin('~/.vim/plugged')
" Vim 中文文档
Plug 'yianwillis/vimcdoc'

" 界面插件
Plug 'scrooloose/nerdtree', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mhinz/vim-startify'
Plug 'voldikss/vim-floaterm'

" 配色方案
Plug 'rakr/vim-one'
Plug 'drewtempelmeyer/palenight.vim'

" git plugin
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" 语言相关插件
Plug 'fatih/vim-go', {'tag': '*'}
Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['cpp', 'c', 'cc', 'h', 'hpp']}

" 补全插件
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 模糊查找
if(has("win32") || has("win64"))
    Plug 'Yggdroot/LeaderF', {'do': '.\install.bat', 'branch': 'master'}
else
    Plug 'Yggdroot/LeaderF', {'do': './install.sh', 'branch': 'master'}
endif

" 文本编辑相关插件
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'triglav/vim-visual-increment'
Plug 'junegunn/vim-easy-align'
Plug 'bronson/vim-trailing-whitespace'
Plug 'kana/vim-textobj-user'
Plug 'rhysd/vim-textobj-anyblock'
Plug 'chrisbra/matchit'

" bookmark
Plug 'mattesgroeger/vim-bookmarks'

" 插件结束的位置，插件全部放在此行上面
call plug#end()

"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 0
let g:go_list_type = "quickfix"
let g:go_metalinter_command = "golangci-lint"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:go_def_mode = 'gopls'
let g:go_info_mode = 'gopls'
let g:go_def_mapping_enabled = 0
let g:go_doc_keywordprg_enabled = 0 " use coc' K

"==============================================================================
" coc.nvim 插件
" 配置见readme里的相关说明
"==============================================================================
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-j> to trigger completion，强行触发补全
inoremap <silent><expr> <C-j> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> g] :call CocAction('jumpDefinition', 'split')<CR>

" 列出当前光标所在单词的引用
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)

" Remap for rename current word -- 重命名当前光标所在单词
nmap <leader>rn <Plug>(coc-rename)

" Use K to show documentation in preview window
nnoremap <silent>K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nmap <silent> <space>a  :<C-u>CocList diagnostics<cr>

" Find symbol of current document 可以当作alt-m用
" nmap <silent> <space>m  :<C-u>CocList outline<cr>

"==============================================================================
" NerdTree 插件
"==============================================================================
" 打开和关闭NERDTree快捷键
map <silent> <space>n :NERDTreeToggle<CR>
map <F4> :NERDTreeMirror<CR>

" 自动定位到nerdtree
map <silent> <space>f :NERDTreeFind<CR>zz

" 是否显示隐藏文件
let NERDTreeShowHidden=1

" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.git']

"==============================================================================
"  leaderF
"==============================================================================
" 查找文件，如果输入;则后面的内容是fullpath模式
" 比如输入abc;dir，则abc搜文件名，dir搜路径名
map <silent> <leader>s :Leaderf file --nameOnly<CR>

" 查找buffer
map <silent> <leader>b :Leaderf! buffer --nameOnly<CR>

" 在全部文件中查找，当前光标下的单词，默认进入normal模式
map <silent> <leader>f :<C-U><C-R>=printf("Leaderf! rg -F --stayOpen -e %s", expand("<cword>"))<CR><CR>

" 在全部文件中中查找，打开界面后输入要查找的内容，交互模式
map <silent> <leader>gf :<C-U><C-R>=printf("Leaderf rg -F --stayOpen ")<CR><CR>

" 列出当前文件的函数列表
map <silent> <space>m  :LeaderfFunction<CR>

let g:Lf_StlSeparator = { 'left': '', 'right': '' }
let g:Lf_StlColorscheme = 'one'
let g:Lf_ReverseOrder = 1
let g:Lf_ShowDevIcons = 0

"==============================================================================
"  ctags -- 手动生成tags文件，因为那些自动索引工具在大项目的时候实在太卡了
"==============================================================================
fun! GenTagFile()
   execute('!ctags -R -a -o .tags --c++-kinds=+px --c-kinds=+px --fields=+niazS --extras=+q')
endfun

map <silent> <F8> :call GenTagFile()<CR>

"==============================================================================
"  EasyMotion
"==============================================================================
" 使用<space>w, <space>b来跳转
map <silent> <space>w <Plug>(easymotion-w)
map <silent> <space>b <Plug>(easymotion-b)

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"==============================================================================
 " vim-terminal
"==============================================================================
tnoremap <silent> <Esc> <C-W>N

nnoremap <silent> <F1>  :FloatermToggle<CR>
tnoremap <silent> <F1>  <C-\><C-n>:FloatermToggle<CR>
nnoremap <silent> <F2>  :FloatermNew<CR>
tnoremap <silent> <F2>  <C-\><C-n>:FloatermNew<CR>
nnoremap <silent> <F3>  :FloatermPrev<CR>
tnoremap <silent> <F3>  <C-\><C-n>:FloatermPrev<CR>
nnoremap <silent> <F4>  :FloatermNext<CR>
tnoremap <silent> <F4>  <C-\><C-n>:FloatermNext<CR>
nnoremap <silent> <F6>  :FloatermKill!<CR>
tnoremap <silent> <F6>  <C-\><C-n>:FloatermKill!<CR>

let g:floaterm_width = 0.9
let g:floaterm_height = 0.6

" set your favorite shell
let g:floaterm_shell = 'powershell'
if has("linux") || has("mac")
    let g:floaterm_shell = 'bash'
endif

"==============================================================================
"  yankstack
"==============================================================================
" :Yank命令查看当前的循环列表内容
call yankstack#setup()
nmap Y y$
let g:yankstack_map_keys = 0
map <space>p <Plug>yankstack_substitute_older_paste
" map <space>P <Plug>yankstack_substitute_newer_paste

"==============================================================================
" vim-easy-align
"==============================================================================
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"==============================================================================
" airline
"==============================================================================
let g:airline_section_b = ' %{fugitive#head()}'
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#gutentags#enabled = 0
let g:airline#extensions#whitespace#checks = []     " 不检查space用法是否错误
let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#coc#show_coc_status = 0

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

"==============================================================================
" visual-increment
"==============================================================================
" 下面设置ctrl-a,ctrl-x光标下的base进制
set nrformats=alpha,octal,hex

"==============================================================================
" nerdcommenter
"==============================================================================
" 自动注释的时候添加空格
let g:NERDSpaceDelims=1
map <space>c <plug>NERDCommenterToggle

"==============================================================================
" git
"==============================================================================
" gitgutter
let g:gitgutter_max_signs = 9999  " 一个buffer里最多显示sign数量

" fugitive
nmap <leader>ga :Git add *<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gs :G<CR>

"==============================================================================
" cpp highlight
"==============================================================================
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1

"==============================================================================
" auto-pairs
"==============================================================================
let g:AutoPairsMapSpace = 0
let g:AutoPairsMultilineClose = 0

"==============================================================================
" startify
"==============================================================================
let g:startify_change_to_dir = 0

"==============================================================================
" trailing-whitespace
"==============================================================================
map <silent> <leader><space> :FixWhitespace<CR>

"==============================================================================
" GUI的设置要放在最后，加载完插件后
"==============================================================================
" colorscheme --[palenight, one]
" let g:airline_theme -- [ palenight, one]

function! SetFrontNTheme()
    if(has("win32") || has("win64"))
        set guifont=Source\ Code\ Pro:h13.5
        set background=dark
        colorscheme palenight
        let g:airline_theme='palenight'

        " 使用directx渲染,需要gvim支持directx -- :version
        set rop=type:directx,level:0.75,gamma:1.25,contrast:0.25,geom:1,renmode:5,taamode:1
        " 设置启动时窗口的大小
        au GUIEnter * simalt ~x
        " gvim 全屏
        map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
    elseif has("mac")
        set lines=999 columns=999
        set guifont=Source\ Code\ Pro:h18
        set gfw=Source\ Code\ Pro:h18
        set background=dark
        colorscheme one
        let g:airline_theme='one'
        set antialias " mac vim anti alias
    else
        set lines=999 columns=999
        set guifont=Source\ Code\ Pro\ 13.5
        set background=dark
        colorscheme one
        let g:airline_theme='one'
    endif
endfunction

if has("gui_running")
  set guioptions -=T    " not toolbar
  set guioptions -=m    " not menubar
  set guioptions -=b    " not bottom scroll bar
  set guioptions -=l    " not left hand scroll bar
  set guioptions -=r    " not right hand scroll bar
  set guioptions -=L    " not left hand scroll bar in vsplit windows
  set guioptions -=R    " not rihgt hand scroll bar in vsplit windows

  :call SetFrontNTheme()
  set cursorline        " highlight current line
  highlight CursorLine  guibg=#3B4252 gui=none
  highlight MatchParen  guifg=#EBCB8B gui=bold,italic
else
  set t_Co=256
  colors molokai
  let g:airline_theme='one'
endif

"==============================================================================
" my macros
"==============================================================================
let @a = '_f*s:proto.w~ea(),lDj'
