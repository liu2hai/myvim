"-----------------------------------------------------------
" when you slow down
" Stop And Think
" is there another way to speed up ?
"-----------------------------------------------------------

" General Settings

set nocompatible	" not compatible with the old-fashion vi mode
set bs=2		    " allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set ruler		    " show the cursor position all the time
set autoread		" auto read when file is changed from outside
set number

filetype off          " necessary to make ftdetect work on Linux
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

syntax enable
syntax on		    " syntax highlight
set hlsearch		" search highlighting

set showmatch		" Cursor shows matching ) and }
set showmode		" Show current mode
set wildchar=<TAB>	" start wild expansion in the command line using <TAB>
set wildmenu        " wild char completion menu

" tab show setting
" only show filename, exclude dir
set guitablabel=%m%t

" ignore these files while expanding wild chars
set wildignore+=*.o,*.class,*.pyc,*.swp

set autoindent		" auto indentation
set smartindent     " smart indent
set incsearch		" incremental search
set nobackup		" no *~ backup files
set copyindent		" copy the previous indentation on autoindenting
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to context

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set expandtab        "replace <TAB> with spaces, use space only
set tabstop=4        "define <TAB> equal 4 spaces
set softtabstop=4    "
set shiftwidth=4     " auto indent length

set clipboard=unnamed  " share system cliboard
set winaltkeys=no       " don't use alt key

set splitbelow  " split buffer below
set splitright  " split buffer right

" 自动加载vimrc
" autocmd! bufwritepost .vimrc source %

" open cl buffer when a quickfix command be executed
autocmd QuickFixCmdPost * :cw 


" 最后编辑的文件保存光标，下次打开该文件自动停留在上次编辑的地方
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"-----------------------------------------------
" pmenu
"-----------------------------------------------
"---- show 10 items in insert mode complete pop menu
set pumheight=20
set pumwidth=20

"-----------------------------------------------
" file type
"-----------------------------------------------

au FileType Makefile set noexpandtab

" --- for python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\s\+$/

" -- for proto
 augroup filetype
   au! BufRead,BufNewFile *.proto setfiletype proto
 augroup end

" -- cindent
autocmd FileType c,cpp,cc  set cindent

"-----------------------------------------------
" functions
"-----------------------------------------------
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return '[PASTE]'
    else
        return ''
    endif
endfunction

"--------------------------------------------------------------------------- 
" USEFUL SHORTCUTS
"--------------------------------------------------------------------------- 
" set leader to ,
let mapleader=","
let g:mapleader=","

" --- move around splits
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" move around tabs. conflict with the original screen top/bottom
" comment them out if you want the original H/L
" go to prev tab 
map <S-H> gT
" go to next tab
map <S-L> gt

" new tab
map <leader>tn :tabnew<CR>
" close tab
map <leader>tc :tabclose<CR> 

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" Bash like keys for the command line
cnoremap <C-a>      <Home>
cnoremap <C-e>      <End>

" ,ps toggles paste mode
nmap <leader>ps :set paste!<BAR>set paste?<CR>

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

" 自动切换到当前文件所在的目录 cdpath
map <Leader>cd :cd %:h<CR>

"--------------------------------------------------------------------------- 
" PROGRAMMING SHORTCUTS
"--------------------------------------------------------------------------- 

" ,g generates the header guard
" map <leader>g :call IncludeGuard()<CR>

fun! IncludeGuard()
   let basename = substitute(bufname(""), '.*/', '', '')
   let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
   call append(0, "#ifndef " . guard)
   call append(1, "#define " . guard)
   call append( line("$"), "#endif // for #ifndef " . guard)
endfun

set cot-=preview "disable doc preview in omnicomplete

"--------------------------------------------------------------------------- 
" ENCODING SETTINGS
"--------------------------------------------------------------------------- 
set encoding=utf-8                                  
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1,cp936,gbk,gb18030

lang messages zh_CN.UTF-8 " 解决consle输出乱码 
" lang messages en_Us.UTF-8 " 解决consle输出乱码 


fun! ViewUTF8()
	set encoding=utf-8                                  
	set termencoding=big5
endfun

fun! UTF8()
	set encoding=utf-8                                  
	set termencoding=big5
	set fileencoding=utf-8
	set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
	set encoding=big5
	set fileencoding=big5
endfun


"--------------------------------------------------------------------------- 
" PLUGIN SETTINGS
"--------------------------------------------------------------------------- 

" 插件开始的位置
call plug#begin('~/.vim/plugged')

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'

" Vim 中文文档
Plug 'yianwillis/vimcdoc'

" 可以快速对齐的插件
Plug 'junegunn/vim-easy-align'

" git plugin
Plug 'tpope/vim-fugitive'

" 可以在文档侧边中显示 git 信息
Plug 'airblade/vim-gitgutter'

" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'

" 自动补全括号的插件，包括小括号，中括号，以及花括号
Plug 'jiangmiao/auto-pairs'

" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 配色方案
Plug 'rakr/vim-one'
Plug 'NLKNguyen/papercolor-theme'
Plug 'liuchengxu/space-vim-theme'

" go 主要插件
Plug 'fatih/vim-go', { 'tag': '*' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" markdown 插件
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

" 自动生成注释的插件
Plug 'scrooloose/nerdcommenter'

" easy motion
Plug 'easymotion/vim-easymotion'

" fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" surround
Plug 'tpope/vim-surround'

" yankstack
Plug 'maxbrunsfeld/vim-yankstack'

" visual-increment
Plug 'triglav/vim-visual-increment'

" 插件结束的位置，插件全部放在此行上面
call plug#end()

"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

" 使用coc的定义跳转，少开一个gopls
let g:go_def_mode = 'guru'
let g:go_info_mode = 'gocode'
let g:go_def_mapping_enabled = 0 
let g:go_doc_keywordprg_enabled = 0 " use coc' K

" vim-go 提供了:GoDecls命令来在当前buffer找出函数
" 类似coc-list的<space-o>，还是使用coc的命令
" vim-go里 ]], [[来在当前的buffer的函数间跳转
" coc-list里设置了<space-j>,<space-k>，不过要
" 事先执行过一次<space-o>，可以随意选择。

"==============================================================================
" coc.nvim 插件
"==============================================================================
" 装完coc后需要配置gopls作为lsp server
" :CocConfig
"{
"  "languageserver": {
"    "golang": {
"      "command": "gopls",
"      "rootPatterns": ["go.mod", ".git/", ".hg/"],
"      "filetypes": ["go"]
"    }
"  }
"}
"
" 安装coc-list
" :CocInstall coc-lists
"
" 安装coc-json, 提供配置补全
" :CocInstall coc-json
"
" 遇到问题，可以重启coc服务
" :CocRestart
" ------------------------------------------------------
" if hidden is not set, TextEdit might fail.
set hidden
set nowritebackup

" Better display for messages
" set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-tab> to trigger completion，强行触发补全
inoremap <silent><expr> <c-tab> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent>K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>

" Manage extensions
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
" nnoremap <silent> <space>c  :<C-u>CocList commands<cr>

" Find symbol of current document 可以当作alt-m用
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>

" Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>

" Do default action for next item. 下面这2个按键，可以在coclist的函数间移动
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>

" Resume latest coc list
nnoremap <silent> <leader>p  :<C-u>CocListResume<CR>

"==============================================================================
" NerdTree 插件
"==============================================================================
" 打开和关闭NERDTree快捷键
map <leader>nt :NERDTreeToggle<CR>
map <F4> :NERDTreeMirror<CR>

" 自动定位到nerdtree
map <leader>nf :NERDTreeFind<CR>zz<C-l> 

" 是否显示隐藏文件
let NERDTreeShowHidden=1

" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.git']

"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================

" majutsushi/tagbar 插件打开关闭快捷键
nnoremap <silent> <F7> :TagbarToggle<CR> 

" set focus to TagBar when opening it
let g:tagbar_autofocus = 1       

"gotag使用方法: gotags -f tags -R .
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

fun! GenGoTags()
   execute('!gotags -f tags -R .') 
endfun

nnoremap <silent> <F8> :call GenGoTags()<CR> 

"==============================================================================
"  fzf
"==============================================================================
" export FZF_DEFAULT_COMMAND="rg --files "
" export FZF_DEFAULT_OPTS="--layout=reverse --inline-info"

nnoremap <silent> <C-p> :FZF -e<CR> 
nnoremap <silent> <Leader>b :Buffers<CR> 
nnoremap <silent> <Leader>f :Rg<CR> 

let g:fzf_buffers_jump = 1 " [Buffers] 如果可能跳到已存在窗口
let g:fzf_action = {
  \ 'ctrl-o': 'edit',
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" 开启历史目录后，在fzf的交互界面使用ctrl-n, ctrl-p来选择之前的输入历史
let g:fzf_history_dir = '~/.local/share/fzf-history'

"==============================================================================
"  EasyMotion
"==============================================================================
" 使用<space>w, <space>b来跳转
map <space> <Plug>(easymotion-prefix)

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"==============================================================================
"  vim-terminal
"==============================================================================
map <silent> <leader>tt :term powershell<CR>
map <silent> <leader>ttb :term bash<CR>
tnoremap <F1> <C-W>N


"==============================================================================
"  yankstack
"==============================================================================
" :Yank命令查看当前的循环列表内容
call yankstack#setup()
nmap Y y$
nmap <space>p <Plug>yankstack_substitute_older_paste
" nmap <space>P <Plug>yankstack_substitute_newer_paste

"==============================================================================
" vim-easy-align
"==============================================================================
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"==============================================================================
" airline
"==============================================================================
" let g:airline_theme='one'
let g:airline_theme='papercolor'
let g:airline_section_b = ' %{fugitive#head()}'
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#whitespace#checks = [] " 不检查space用法是否错误

"==============================================================================
" visual-increment
"==============================================================================
" 下面设置ctrl-a,ctrl-x光标下的base进制
set nrformats=alpha,octal,hex

"==============================================================================
"  其他插件配置
"==============================================================================
" markdwon 的快捷键
map <silent> <F5> <Plug>MarkdownPreview
map <silent> <F6> <Plug>StopMarkdownPreview

" 自动注释的时候添加空格
let g:NERDSpaceDelims=1

" git setting
let g:gitgutter_max_signs = 9999  " 一个buffer里最多显示sign数量

"==============================================================================
" GUI的设置要放在最后，加载完插件后
"==============================================================================
function! SetGUIFront()
    if(has("win32") || has("win64"))
        au GUIEnter * simalt ~x  " 设置启动时窗口的大小
        " set guifont=Fira\ Code:h13
        " set guifont=Courier\ New:h13
        set guifont=Source\ Code\ Pro:h14
        set background=dark 
    elseif has("linux")
        set lines=999 columns=999
        set guifont=Courier\ New:h14
        set background=dark 
    elseif has("mac")
        set lines=999 columns=999
        set guifont=Courier\ New:h18
        set background=dark 
    endif 
endfunction

if has("gui_running")	
  :call SetGUIFront()

  set guioptions -=T    " not toolbar
  set guioptions -=m    " not menubar
  set guioptions -=b    " not bottom scroll bar
  set guioptions -=l    " not left hand scroll bar
  set guioptions -=r    " not right hand scroll bar
  set guioptions -=L    " not left hand scroll bar in vsplit windows
  set guioptions -=R    " not rihgt hand scroll bar in vsplit windows
  set termguicolors

  " colorscheme PaperColor 
  colorscheme space_vim_theme 
  set background=dark 

  set cursorline        " highlight current line
  highlight CursorLine          guibg=#003853 ctermbg=24  gui=none cterm=none
else
  " terminal color settings
  colors vgod
endif

"==============================================================================
" my macros
"==============================================================================
let @q = '_f*s:proto.w~ea(),lDj'

