"-----------------------------------------------------------
" and i know she is living there and she loves me to this day
"-----------------------------------------------------------

" General Settings

set nocompatible	" not compatible with the old-fashion vi mode
set bs=2		    " allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set ruler		    " show the cursor position all the time
set autoread		" auto read when file is changed from outside
set number

filetype off          " necessary to make ftdetect work on Linux
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

syntax enable
syntax on		" syntax highlight
set hlsearch		" search highlighting

set showmatch		" Cursor shows matching ) and }
set showmode		" Show current mode
set wildchar=<TAB>	" start wild expansion in the command line using <TAB>
set wildmenu        " wild char completion menu

" tab show setting
" only show filename, exclude dir
set guitablabel=%m%t

" ignore these files while expanding wild chars
set wildignore=*.o,*.class,*.pyc

set autoindent		" auto indentation
set smartindent     " smart indent
set incsearch		" incremental search
set nobackup		" no *~ backup files
set copyindent		" copy the previous indentation on autoindenting
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to context

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set expandtab        "replace <TAB> with spaces, use space only
set tabstop=4        "define <TAB> equal 4 spaces
set softtabstop=4    "
set shiftwidth=4     " auto indent length

" 自动加载vimrc
" autocmd! bufwritepost .vimrc source ~/.vimrc

" open cl buffer when a quickfix command be executed
autocmd QuickFixCmdPost * :cw 

"-----------------------------------------------
" pmenu
"-----------------------------------------------
" --- set highlight pmenu
"---ctermfg ctermbg is NR-8 for terminal 
"---guifg guibg are reverse here, i don't know why
highlight Pmenu ctermbg=7* ctermfg=0 guifg=#666666 guibg=#fbf3f4 
highlight PmenuSel ctermbg=4  ctermfg=7*  guifg=#1f82cd guibg=#dadd00
highlight PmenuSbar ctermbg=7*  ctermfg=0 guifg=#606060 guibg=Green  

"---- show 10 items in insert mode complete pop menu
set pumheight=10

"-----------------------------------------------
" file type
"-----------------------------------------------

au FileType Makefile set noexpandtab

" --- for python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\s\+$/

" -- for proto
 augroup filetype
   au! BufRead,BufNewFile *.proto setfiletype proto
 augroup end

" -- cindent
autocmd FileType c,cpp,cc  set cindent

"-----------------------------------------------
" functions
"-----------------------------------------------
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return '[PASTE]'
    else
        return ''
    endif
endfunction

"--------------------------------------------------------------------------- 
" Tip #382: Search for <cword> and replace with input() in all open buffers 
" replace the current word in all opened buffers
" map <leader>r :call Replace()<CR>
"--------------------------------------------------------------------------- 
fun! Replace() 
    let s:word = input("Replace " . expand('<cword>') . " with:") 
    :exe 'bufdo! %s/\<' . expand('<cword>') . '\>/' . s:word . '/ge' 
    :unlet! s:word 
endfun 

"--------------------------------------------------------------------------- 
" USEFUL SHORTCUTS
"--------------------------------------------------------------------------- 
" set leader to ,
let mapleader=","
let g:mapleader=","

" open the error console
map <leader>cc :botright cope<CR> 
" move to next error
map <leader>en :cn<CR>
" move to the prev error
map <leader>ep :cp<CR>
" close the quickfix window
map <leader>ec :ccl<CR>


" --- move around splits
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" move around tabs. conflict with the original screen top/bottom
" comment them out if you want the original H/L
" go to prev tab 
map <S-H> gT
" go to next tab
map <S-L> gt

" new tab
map <leader>tn :tabnew<CR>
" close tab
map <leader>tc :tabclose<CR> 
" first tab
map <leader>tf :tabfirst<CR>
" last tab
map <leader>tl :tablast<CR>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

" ,ps toggles paste mode
nmap <leader>ps :set paste!<BAR>set paste?<CR>

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

" 自动切换到当前文件所在的目录 cdpath
map <Leader>cd :cd %:h<CR>

" refresh file manual
map <F5> :e!<CR>

" compile
map <F6> :make!<CR>

"--------------------------------------------------------------------------- 
" PROGRAMMING SHORTCUTS
"--------------------------------------------------------------------------- 
function! PTagIt()
    exec "ptag " . expand("<cword>")
endfunction

" open a preview tag window
nmap <leader>pt :call PTagIt()<CR>

" close a preview tag window
nmap <leader>pc :pc<CR>


" ,g generates the header guard
map <leader>g :call IncludeGuard()<CR>

fun! IncludeGuard()
   let basename = substitute(bufname(""), '.*/', '', '')
   let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
   call append(0, "#ifndef " . guard)
   call append(1, "#define " . guard)
   call append( line("$"), "#endif // for #ifndef " . guard)
endfun

set cot-=preview "disable doc preview in omnicomplete

"--------------------------------------------------------------------------- 
" ENCODING SETTINGS
"--------------------------------------------------------------------------- 
set encoding=utf-8                                  
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1

fun! ViewUTF8()
	set encoding=utf-8                                  
	set termencoding=big5
endfun

fun! UTF8()
	set encoding=utf-8                                  
	set termencoding=big5
	set fileencoding=utf-8
	set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
	set encoding=big5
	set fileencoding=big5
endfun


"--------------------------------------------------------------------------- 
" PLUGIN SETTINGS
"--------------------------------------------------------------------------- 

" 插件开始的位置
call plug#begin('~/.vim/plugged')

" Vim 中文文档
Plug 'yianwillis/vimcdoc'

" 可以快速对齐的插件
Plug 'junegunn/vim-easy-align'

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'

" 可以使 nerdtree Tab 标签的名称更友好些
Plug 'jistr/vim-nerdtree-tabs'

" 可以在导航目录中看到 git 版本信息
Plug 'Xuyuanp/nerdtree-git-plugin'

" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'

" 自动补全括号的插件，包括小括号，中括号，以及花括号
Plug 'jiangmiao/auto-pairs'

" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
Plug 'vim-airline/vim-airline'

" 有道词典在线翻译
Plug 'ianva/vim-youdao-translater'

" 代码自动完成，安装完插件还需要额外配置才可以使用
Plug 'Valloric/YouCompleteMe'

" 可以在文档中显示 git 信息
Plug 'airblade/vim-gitgutter'


" 下面两个插件要配合使用，可以自动生成代码块
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" 配色方案
" colorscheme gruvbox 
Plug 'morhetz/gruvbox'
Plug 'rakr/vim-one'
Plug 'altercation/vim-colors-solarized'
Plug 'NLKNguyen/papercolor-theme'

" go 主要插件
Plug 'fatih/vim-go', { 'tag': '*' }
" go 中的代码追踪，输入 gd 就可以自动跳转
Plug 'dgryski/vim-godef'

" markdown 插件
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

" 自动生成注释的插件
Plug 'scrooloose/nerdcommenter'

" easy motion
Plug 'easymotion/vim-easymotion'

" CTRL-P
Plug 'kien/ctrlp.vim'

" 插件结束的位置，插件全部放在此行上面
call plug#end()

"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:godef_split=2

" 直接通过 go run 执行当前文件
autocmd FileType go nmap <leader>r :GoRun %<CR>

"==============================================================================
" NERDTree 插件
"==============================================================================

" 打开和关闭NERDTree快捷键
map <leader>nt :NERDTreeToggle<CR>
nmap <M-m> :NERDTreeFind<CR>
map <F4> :NERDTreeMirror<CR>

" 显示行号
let NERDTreeShowLineNumbers=1
" 打开文件时是否显示目录
let NERDTreeAutoCenter=0
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
" let NERDTreeWinSize=31
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开 vim 文件及显示书签列表
let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
" let g:nerdtree_tabs_open_on_console_startup=1

"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================

" majutsushi/tagbar 插件打开关闭快捷键
nnoremap <silent> <F7> :TagbarToggle<CR> 

" set focus to TagBar when opening it
let g:tagbar_autofocus = 1       

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }


"==============================================================================
"  nerdtree-git-plugin 插件
"==============================================================================
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeShowIgnoredStatus = 1
nmap <Leader>pwd :NERDTreeCWD<CR>

"==============================================================================
"  Valloric/YouCompleteMe 插件
"==============================================================================

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<M-j>', '<DOWN>']
let g:ycm_key_list_previous_completion = ['<M-k>', '<Up>']
let g:SuperTabDefaultCompletionType = '<M-j>'

" 关闭了提示再次触发的快捷键
let g:ycm_key_invoke_completion = '<Leader>,'

" -- 白名单
let g:ycm_filetype_whitelist = { 
            \ "c":1, "cpp":1, "objc":1, "sh":1, "zsh":1, "java":1,
            \ "go":1, "python":1, "erlang":1, "cs":1, "lua":1,
            \ "javascript":1,
			\ }

"==============================================================================
" UltiSnips 插件
"==============================================================================
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"==============================================================================
"  EasyMotion
"==============================================================================
"let g:EasyMotion_leader_key = '<Leader>m' " default is <Leader>w
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"==============================================================================
"  ctrlp.vim
"==============================================================================
let g:ctrlp_map = '<C-Tab>'            " map c-t to open ctrlp plugin
let g:ctrlp_cmd = 'CtrlPBuffer'        " use this cmd to open ctrlp when you press above mapping
let g:ctrlp_by_filename = 1            " set default to search filename not path 
let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll|beam)$'
            \ }

"==============================================================================
"  其他插件配置
"==============================================================================

" markdwon 的快捷键
map <silent> <F5> <Plug>MarkdownPreview
map <silent> <F6> <Plug>StopMarkdownPreview

" 自动注释的时候添加空格
let g:NERDSpaceDelims=1

" 有道词典插件
map <M-t> :Ydc<CR>

"==============================================================================
" GUI的设置要放在最后，加载完插件后
"==============================================================================
if has("gui_running")	" GUI color and font settings
  " 设置启动时窗口的大小
  set lines=999 columns=999

  set guifont=Courier\ New:h18
  set background=dark 

  set guioptions -=T    " not toolbar
  set guioptions -=m    " not menubar
  set guioptions -=b    " not bottom scroll bar
  set guioptions -=l    " not left hand scroll bar
  set guioptions -=r    " not right hand scroll bar
  set guioptions -=L    " not left hand scroll bar in vsplit windows
  set guioptions -=R    " not rihgt hand scroll bar in vsplit windows

  "colors gmolokai
  colorscheme PaperColor 
  set background=dark 

  set termguicolors
  set cursorline        " highlight current line
  highlight CursorLine          guibg=#003853 ctermbg=24  gui=none cterm=none
else
  " terminal color settings
  colors vgod
endif

"==============================================================================
" vim 的 session 管理
"==============================================================================
"
" 自动保存 session
autocmd VimLeave * mks! ~/.vim/session.vim

" 加载 session 的快捷键
nmap <Leader>his :source ~/.vim/session.vim<CR>
